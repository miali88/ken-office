{"version":3,"file":"word-main.js","mappings":"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","sources":["webpack://kenneth-office-addin-unified/./src/word/ai-rewrite-structured.ts","webpack://kenneth-office-addin-unified/./src/word/word-main.ts"],"sourcesContent":["/**\n * AI Document Rewrite with Structured Operations - SIMPLIFIED VERSION\n *\n * Shows live progress in the UI and catches errors at each step\n */\n\n/* global Word */\n\nimport type { DocumentStructure, TableStructure, DocumentOperation } from './types';\n\n/**\n * Main handler for structured AI document rewrite\n */\nexport async function handleStructuredAIRewrite(): Promise<void> {\n  const statusElement = document.getElementById(\"rewrite-status\");\n  const progressContainer = document.getElementById(\"progress-container\");\n  const progressBar = document.getElementById(\"progress-bar\");\n  const progressText = document.getElementById(\"progress-text\");\n  const button = document.getElementById(\"ai-rewrite-btn\") as HTMLButtonElement;\n\n  if (!statusElement || !button) {\n    alert(\"Required UI elements not found\");\n    return;\n  }\n\n  // Create live debug log that shows in the UI\n  let debugLog: string[] = [];\n  const addLog = (message: string, isError = false) => {\n    const timestamp = new Date().toLocaleTimeString();\n    const logLine = `${timestamp} ${message}`;\n    debugLog.push(logLine);\n    console.log(logLine);\n\n    // Update UI immediately\n    const color = isError ? '#d32f2f' : '#666';\n    statusElement.innerHTML = `\n      <div style=\"padding: 12px; background: ${isError ? '#ffebee' : '#f5f5f5'}; border-radius: 4px; border: 1px solid ${isError ? '#ef5350' : '#ddd'};\">\n        <div style=\"margin-bottom: 8px; font-weight: bold; color: ${color};\">${message}</div>\n        <div style=\"max-height: 200px; overflow-y: auto; font-size: 11px; font-family: monospace; background: white; padding: 8px; border-radius: 4px;\">\n          ${debugLog.map(line => `<div style=\"margin: 2px 0;\">${line}</div>`).join('')}\n        </div>\n      </div>\n    `;\n  };\n\n  try {\n    button.disabled = true;\n    if (progressContainer) progressContainer.style.display = 'block';\n\n    // =========================================================================\n    // STEP 1: Extract document text (SIMPLIFIED - NO TABLES)\n    // =========================================================================\n    addLog(\"📖 STEP 1/3: Extracting document text...\");\n    if (progressText) progressText.textContent = \"Step 1/3: Reading document\";\n    if (progressBar) progressBar.style.width = '10%';\n\n    let structure: DocumentStructure;\n    try {\n      addLog(\"  Loading document body...\");\n      structure = await extractDocumentSimplified();\n      addLog(`  ✅ Extracted ${structure.text.length} chars, ${structure.placeholders.length} placeholders`);\n      if (progressBar) progressBar.style.width = '33%';\n    } catch (extractError) {\n      const errMsg = extractError instanceof Error ? extractError.message : String(extractError);\n      addLog(`❌ EXTRACTION FAILED: ${errMsg}`, true);\n      throw new Error(`Step 1 failed: ${errMsg}`);\n    }\n\n    // =========================================================================\n    // STEP 2: Send to backend API\n    // =========================================================================\n    addLog(\"🤖 STEP 2/3: Sending to backend...\");\n    if (progressText) progressText.textContent = \"Step 2/3: AI processing\";\n    if (progressBar) progressBar.style.width = '40%';\n\n    let operations: DocumentOperation[];\n    try {\n      addLog(\"  Connecting to http://localhost:3001/api/word-agent/rewrite\");\n      addLog(`  Payload size: ${JSON.stringify({ documentText: structure.text }).length} bytes`);\n\n      operations = await sendToBackend(structure, addLog);\n\n      addLog(`  ✅ Backend returned ${operations.length} operations`);\n      if (progressBar) progressBar.style.width = '66%';\n    } catch (backendError) {\n      const errMsg = backendError instanceof Error ? backendError.message : String(backendError);\n      addLog(`❌ BACKEND REQUEST FAILED: ${errMsg}`, true);\n\n      if (errMsg.includes('fetch') || errMsg.includes('connect') || errMsg.includes('Failed to fetch')) {\n        addLog(`💡 Is the backend running? Check: http://localhost:3001`, true);\n      }\n\n      throw new Error(`Step 2 failed: ${errMsg}`);\n    }\n\n    // =========================================================================\n    // STEP 3: Execute operations\n    // =========================================================================\n    addLog(\"✍️ STEP 3/3: Applying changes to document...\");\n    if (progressText) progressText.textContent = \"Step 3/3: Applying changes\";\n    if (progressBar) progressBar.style.width = '75%';\n\n    try {\n      await executeOperations(operations);\n      addLog(`  ✅ Applied all ${operations.length} operations`);\n      if (progressBar) progressBar.style.width = '100%';\n    } catch (executeError) {\n      const errMsg = executeError instanceof Error ? executeError.message : String(executeError);\n      addLog(`❌ EXECUTION FAILED: ${errMsg}`, true);\n      throw new Error(`Step 3 failed: ${errMsg}`);\n    }\n\n    // =========================================================================\n    // SUCCESS!\n    // =========================================================================\n    statusElement.innerHTML = `\n      <div style=\"padding: 12px; background: #e8f5e9; border: 2px solid #4caf50; border-radius: 4px;\">\n        <div style=\"color: #2e7d32; font-weight: bold; margin-bottom: 8px;\">✅ Document updated successfully!</div>\n        <div style=\"max-height: 200px; overflow-y: auto; font-size: 11px; font-family: monospace; background: white; padding: 8px; border-radius: 4px;\">\n          ${debugLog.map(line => `<div style=\"margin: 2px 0;\">${line}</div>`).join('')}\n        </div>\n      </div>\n    `;\n    if (progressText) progressText.textContent = \"Complete!\";\n\n    setTimeout(() => {\n      if (progressContainer) progressContainer.style.display = 'none';\n    }, 3000);\n\n  } catch (error) {\n    console.error('[FATAL ERROR]', error);\n\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    const errorStack = error instanceof Error ? error.stack : '';\n\n    statusElement.innerHTML = `\n      <div style=\"padding: 12px; background: #ffebee; border: 2px solid #d32f2f; border-radius: 4px;\">\n        <div style=\"color: #d32f2f; font-weight: bold; margin-bottom: 8px; font-size: 16px;\">❌ PROCESS FAILED</div>\n        <div style=\"margin-bottom: 12px; color: #333; font-size: 14px;\">${errorMessage}</div>\n        <div style=\"margin-bottom: 12px; max-height: 200px; overflow-y: auto; font-size: 11px; font-family: monospace; background: white; padding: 8px; border-radius: 4px;\">\n          ${debugLog.map(line => `<div style=\"margin: 2px 0;\">${line}</div>`).join('')}\n        </div>\n        <details style=\"margin-top: 8px;\">\n          <summary style=\"cursor: pointer; color: #d32f2f; font-size: 12px;\">Show stack trace</summary>\n          <pre style=\"font-size: 10px; margin-top: 4px; background: #f5f5f5; padding: 8px; border-radius: 4px; overflow-x: auto; white-space: pre-wrap;\">${errorStack || 'No stack trace available'}</pre>\n        </details>\n      </div>\n    `;\n\n    if (progressText) {\n      progressText.textContent = \"FAILED\";\n      progressText.style.color = '#d32f2f';\n    }\n\n    if (progressBar) {\n      (progressBar as HTMLElement).style.background = '#d32f2f';\n    }\n  } finally {\n    button.disabled = false;\n  }\n}\n\n/**\n * Extract document structure - SIMPLIFIED VERSION (no tables)\n */\nasync function extractDocumentSimplified(): Promise<DocumentStructure> {\n  return Word.run(async (context) => {\n    const body = context.document.body;\n    body.load('text');\n    await context.sync();\n\n    const text = body.text;\n\n    // Extract placeholders\n    const placeholderRegex = /\\{\\{[^}]+\\}\\}/g;\n    const placeholders = Array.from(new Set(text.match(placeholderRegex) || []));\n\n    // Return simple structure WITHOUT tables for now\n    return {\n      text,\n      tables: [],\n      placeholders\n    };\n  });\n}\n\n/**\n * Send to backend with detailed logging\n */\nasync function sendToBackend(structure: DocumentStructure, addLog: (msg: string, isError?: boolean) => void): Promise<DocumentOperation[]> {\n  const caseId = 'cmfivedyx0001c96zlzkskb7b';\n\n  const requestBody = {\n    documentText: structure.text,\n    documentStructure: structure,\n    caseId,\n    useStructuredOperations: true,\n    instructions: 'Fill in all placeholders with accurate case information'\n  };\n\n  addLog(`  Request body created: ${JSON.stringify(requestBody).length} bytes`);\n\n  try {\n    addLog(`  Making fetch() call...`);\n\n    const response = await fetch(`http://localhost:3001/api/word-agent/rewrite`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(requestBody)\n    });\n\n    addLog(`  Response received: ${response.status} ${response.statusText}`);\n\n    if (!response.ok) {\n      let errorText = '';\n      try {\n        errorText = await response.text();\n        addLog(`  Error response: ${errorText.substring(0, 200)}`, true);\n        const errorJson = JSON.parse(errorText);\n        throw new Error(`API ${response.status}: ${errorJson.error?.message || errorJson.message || response.statusText}`);\n      } catch (parseError) {\n        throw new Error(`API ${response.status}: ${errorText.substring(0, 200) || response.statusText}`);\n      }\n    }\n\n    const resultText = await response.text();\n    addLog(`  Response text length: ${resultText.length} bytes`);\n\n    let result;\n    try {\n      result = JSON.parse(resultText);\n    } catch (parseError) {\n      addLog(`  JSON parse error: ${parseError}`, true);\n      addLog(`  Response preview: ${resultText.substring(0, 300)}`, true);\n      throw new Error(`Invalid JSON from server`);\n    }\n\n    if (!result.success) {\n      const errorMsg = result.error?.message || result.message || 'Backend processing failed';\n      addLog(`  Backend reported failure: ${errorMsg}`, true);\n      throw new Error(errorMsg);\n    }\n\n    addLog(`  Success! Operations received: ${result.operations?.length || 0}`);\n    return result.operations || [];\n\n  } catch (error) {\n    // Network error detection\n    if (error instanceof TypeError && (error.message.includes('fetch') || error.message.includes('Failed to fetch'))) {\n      addLog(`  Network error: Cannot connect to backend`, true);\n      throw new Error(`Cannot connect to http://localhost:3001 - Is the server running?`);\n    }\n\n    throw error;\n  }\n}\n\n/**\n * Execute operations on Word document\n */\nasync function executeOperations(operations: DocumentOperation[]): Promise<void> {\n  return Word.run(async (context) => {\n    console.log('[Operations] Starting execution, count:', operations.length);\n\n    // Enable track changes\n    context.document.changeTrackingMode = Word.ChangeTrackingMode.trackAll;\n\n    try {\n      context.document.properties.author = \"Kenneth AI\";\n      context.document.properties.load('author');\n    } catch (e) {\n      console.warn(\"Could not set author:\", e);\n    }\n\n    await context.sync();\n\n    let successCount = 0;\n    let failureCount = 0;\n\n    for (let i = 0; i < operations.length; i++) {\n      const operation = operations[i];\n      console.log(`[Operation ${i + 1}/${operations.length}] Type: ${operation.type}`);\n\n      try {\n        switch (operation.type) {\n          case 'fillTableCell':\n            await executeFillTableCell(context, operation);\n            break;\n          case 'replacePlaceholder':\n            await executeReplacePlaceholder(context, operation);\n            break;\n          case 'replaceText':\n            await executeReplaceText(context, operation);\n            break;\n          case 'deleteText':\n            await executeDeleteText(context, operation);\n            break;\n          default:\n            console.warn(`Unknown operation type:`, operation);\n            failureCount++;\n            continue;\n        }\n\n        await context.sync();\n        successCount++;\n      } catch (error) {\n        failureCount++;\n        console.error(`Operation ${i} failed:`, error);\n      }\n    }\n\n    console.log('[Operations] Complete:', { total: operations.length, success: successCount, failed: failureCount });\n  });\n}\n\n/**\n * Execute fillTableCell operation\n */\nasync function executeFillTableCell(\n  context: Word.RequestContext,\n  operation: Extract<DocumentOperation, { type: 'fillTableCell' }>\n): Promise<void> {\n  const tables = context.document.body.tables;\n  tables.load('items');\n  await context.sync();\n\n  if (operation.tableIndex >= tables.items.length) {\n    console.warn(`Table ${operation.tableIndex} not found`);\n    return;\n  }\n\n  const table = tables.items[operation.tableIndex];\n  const rows = table.rows;\n  rows.load('items');\n  await context.sync();\n\n  if (operation.row >= rows.items.length) {\n    console.warn(`Row ${operation.row} not found`);\n    return;\n  }\n\n  const row = rows.items[operation.row];\n  const cells = row.cells;\n  cells.load('items');\n  await context.sync();\n\n  if (operation.cell >= cells.items.length) {\n    console.warn(`Cell ${operation.cell} not found`);\n    return;\n  }\n\n  const cell = cells.items[operation.cell];\n  cell.body.clear();\n  cell.body.insertText(operation.value, Word.InsertLocation.start);\n}\n\n/**\n * Execute replacePlaceholder operation\n */\nasync function executeReplacePlaceholder(\n  context: Word.RequestContext,\n  operation: Extract<DocumentOperation, { type: 'replacePlaceholder' }>\n): Promise<void> {\n  const MAX_SEARCH_LENGTH = 200;\n  const isLongPlaceholder = operation.target.length > MAX_SEARCH_LENGTH;\n\n  let searchTerm = operation.target;\n\n  if (isLongPlaceholder) {\n    const prefixMatch = operation.target.match(/^(\\{\\{[\\s]*[A-Z_0-9]+[\\s]*:)/);\n    searchTerm = prefixMatch ? prefixMatch[1] : operation.target.substring(0, 100);\n  }\n\n  const searchResults = context.document.body.search(searchTerm, {\n    matchCase: false,\n    matchWholeWord: false\n  });\n  searchResults.load('items');\n  await context.sync();\n\n  if (searchResults.items.length === 0) {\n    console.warn(`Placeholder not found: ${searchTerm}`);\n    return;\n  }\n\n  let replacedCount = 0;\n\n  if (isLongPlaceholder) {\n    for (const result of searchResults.items) {\n      try {\n        const paragraph = result.paragraphs.getFirst();\n        paragraph.load('text');\n        await context.sync();\n\n        const paragraphText = paragraph.text;\n        const placeholderIndex = paragraphText.indexOf(operation.target);\n\n        if (placeholderIndex !== -1) {\n          const newText = paragraphText.substring(0, placeholderIndex) +\n                         operation.value +\n                         paragraphText.substring(placeholderIndex + operation.target.length);\n\n          paragraph.clear();\n          paragraph.insertText(newText, Word.InsertLocation.start);\n          replacedCount++;\n\n          if (operation.replaceAll === false) break;\n        }\n      } catch (expandError) {\n        result.insertText(operation.value, Word.InsertLocation.replace);\n        replacedCount++;\n        if (operation.replaceAll === false) break;\n      }\n    }\n  } else {\n    if (operation.replaceAll !== false) {\n      for (const result of searchResults.items) {\n        result.insertText(operation.value, Word.InsertLocation.replace);\n        replacedCount++;\n      }\n    } else {\n      searchResults.items[0].insertText(operation.value, Word.InsertLocation.replace);\n      replacedCount = 1;\n    }\n  }\n\n  console.log(`Replaced ${replacedCount} occurrences`);\n}\n\n/**\n * Execute replaceText operation\n */\nasync function executeReplaceText(\n  context: Word.RequestContext,\n  operation: Extract<DocumentOperation, { type: 'replaceText' }>\n): Promise<void> {\n  const searchResults = context.document.body.search(operation.target, {\n    matchCase: operation.matchCase || false,\n    matchWholeWord: operation.matchWholeWord || false\n  });\n  searchResults.load('items');\n  await context.sync();\n\n  if (searchResults.items.length === 0) {\n    console.warn(`Text not found: ${operation.target}`);\n    return;\n  }\n\n  for (const result of searchResults.items) {\n    result.insertText(operation.value, Word.InsertLocation.replace);\n  }\n}\n\n/**\n * Execute deleteText operation\n */\nasync function executeDeleteText(\n  context: Word.RequestContext,\n  operation: Extract<DocumentOperation, { type: 'deleteText' }>\n): Promise<void> {\n  const searchResults = context.document.body.search(operation.target, {\n    matchCase: false,\n    matchWholeWord: false\n  });\n  searchResults.load('items');\n  await context.sync();\n\n  if (searchResults.items.length === 0) {\n    console.warn(`Text not found: ${operation.target}`);\n    return;\n  }\n\n  for (const result of searchResults.items) {\n    result.delete();\n  }\n}\n","/**\n * Word-specific functionality\n * Main module for Word add-in features - FULL FUNCTIONALITY\n */\n\n/* global document, Office, Word */\n\nimport * as Diff from 'diff';\nimport { handleStructuredAIRewrite } from './ai-rewrite-structured';\n\ninterface ParagraphChange {\n  type: 'insert' | 'delete' | 'replace' | 'equal';\n  paragraphIndex: number;\n  originalText?: string;\n  newText?: string;\n}\n\ninterface PlaceholderReplacement {\n  placeholder: string;\n  value: string;\n  confidence: 'high' | 'medium' | 'low';\n  source?: string;\n}\n\n/**\n * Initialize Word add-in\n */\nexport function initialize() {\n  console.log('[Word] Initializing Word add-in...');\n\n  // Inject HTML into the app container\n  const appContainer = document.getElementById('app-container');\n  if (appContainer) {\n    appContainer.innerHTML = getWordHTML();\n    console.log('[Word] HTML injected successfully');\n  } else {\n    console.error('[Word] app-container not found!');\n    return;\n  }\n\n  // Setup tab switching\n  setupTabs();\n\n  // Setup button handlers\n  const aiRewriteBtn = document.getElementById('ai-rewrite-btn');\n  const aiAutofillBtn = document.getElementById('ai-autofill-btn');\n  const testPingBtn = document.getElementById('test-ping-btn');\n\n  if (aiRewriteBtn) aiRewriteBtn.onclick = handleStructuredAIRewrite; // ← Use structured operations mode\n  if (aiAutofillBtn) aiAutofillBtn.onclick = handleAIAutofill;\n  if (testPingBtn) testPingBtn.onclick = handleTestPing;\n\n  console.log('[Word] All handlers wired up');\n}\n\n/**\n * Setup tab switching\n */\nfunction setupTabs() {\n  const tabButtons = document.querySelectorAll('.tab-button');\n  const tabContents = document.querySelectorAll('.tab-content');\n\n  tabButtons.forEach(button => {\n    button.addEventListener('click', () => {\n      const targetTab = button.getAttribute('data-tab');\n\n      // Remove active class from all\n      tabButtons.forEach(btn => {\n        btn.classList.remove('active');\n        (btn as HTMLElement).style.background = '#1e1e1e';\n        (btn as HTMLElement).style.color = '#999';\n      });\n      tabContents.forEach(content => {\n        content.classList.remove('active');\n        (content as HTMLElement).style.display = 'none';\n      });\n\n      // Activate selected\n      button.classList.add('active');\n      (button as HTMLElement).style.background = '#2d2d2d';\n      (button as HTMLElement).style.color = 'white';\n\n      const targetContent = document.getElementById(`${targetTab}-tab`);\n      if (targetContent) {\n        targetContent.classList.add('active');\n        targetContent.style.display = 'flex';\n      }\n    });\n  });\n}\n\n/**\n * Show notification (replaces alert)\n */\nfunction showNotification(message: string, type: 'success' | 'error' | 'info' = 'info') {\n  const notification = document.createElement('div');\n  notification.style.cssText = `\n    position: fixed; top: 20px; right: 20px;\n    padding: 16px 24px; border-radius: 8px;\n    color: white; font-weight: 600; z-index: 9999;\n    background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};\n    box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n    animation: slideIn 0.3s ease;\n  `;\n  notification.textContent = message;\n  document.body.appendChild(notification);\n\n  setTimeout(() => {\n    notification.style.animation = 'slideOut 0.3s ease';\n    setTimeout(() => notification.remove(), 300);\n  }, 3000);\n}\n\n/**\n * Test backend connection\n */\nasync function handleTestPing() {\n  const resultElement = document.getElementById(\"test-result\");\n  const button = document.getElementById(\"test-ping-btn\") as HTMLButtonElement;\n\n  if (!resultElement || !button) return;\n\n  button.disabled = true;\n  resultElement.textContent = \"Running comprehensive diagnostics...\\n\\n\";\n\n  // Test 1: Basic fetch capability\n  resultElement.textContent += \"TEST 1: Basic fetch capability\\n\";\n  try {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/todos/1\");\n    const data = await response.json();\n    resultElement.textContent += `✅ Fetch works! Got external data: ${data.title}\\n\\n`;\n  } catch (error) {\n    resultElement.textContent += `❌ Fetch completely blocked: ${error instanceof Error ? error.message : 'Unknown'}\\n`;\n    button.disabled = false;\n    return;\n  }\n\n  // Test 2: Localhost variations\n  const urlsToTest = [\n    \"/api/word-agent/rewrite\",\n    \"https://localhost:3000/api/word-agent/rewrite\",\n    \"http://localhost:3001/api/word-agent/rewrite\",\n  ];\n\n  resultElement.textContent += \"TEST 2: Localhost variations\\n\";\n\n  for (const url of urlsToTest) {\n    resultElement.textContent += `\\nTrying: ${url}\\n`;\n\n    try {\n      const startTime = Date.now();\n      const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          documentText: \"Test\",\n          caseId: \"test\",\n          instructions: \"Test\"\n        })\n      });\n\n      const elapsed = Date.now() - startTime;\n      resultElement.textContent += `  ✅ Connected! (${elapsed}ms)\\n`;\n      resultElement.textContent += `  Status: ${response.status}\\n`;\n\n      const text = await response.text();\n      resultElement.textContent += `  Response: ${text.substring(0, 100)}\\n`;\n\n      if (response.ok) {\n        resultElement.textContent += `\\n🎉 SUCCESS! Use this URL: ${url}\\n`;\n        break;\n      }\n    } catch (error) {\n      resultElement.textContent += `  ❌ Failed: ${error instanceof Error ? error.message : 'Unknown'}\\n`;\n    }\n  }\n\n  // Test 3: Environment info\n  resultElement.textContent += `\\n\\nTEST 3: Environment info\\n`;\n  resultElement.textContent += `Current origin: ${window.location.origin}\\n`;\n  resultElement.textContent += `Current URL: ${window.location.href}\\n`;\n  resultElement.textContent += `Protocol: ${window.location.protocol}\\n`;\n\n  button.disabled = false;\n}\n\n/**\n * AI Autofill handler\n */\nasync function handleAIAutofill() {\n  const statusElement = document.getElementById(\"autofill-status\");\n  const resultsElement = document.getElementById(\"autofill-results\");\n  const button = document.getElementById(\"ai-autofill-btn\") as HTMLButtonElement;\n\n  if (!statusElement || !resultsElement || !button) {\n    showNotification(\"Required elements not found\", \"error\");\n    return;\n  }\n\n  try {\n    button.disabled = true;\n    statusElement.textContent = \"Analyzing document...\";\n    resultsElement.innerHTML = \"\";\n\n    const documentData = await Word.run(async (context) => {\n      context.document.body.load('text');\n      await context.sync();\n\n      const documentText = context.document.body.text;\n      const placeholderRegex = /\\{\\{([^}]+)\\}\\}/g;\n      const placeholders = [];\n      let match;\n      while ((match = placeholderRegex.exec(documentText)) !== null) {\n        placeholders.push(match[1]);\n      }\n\n      return {\n        documentText,\n        placeholders: [...new Set(placeholders)]\n      };\n    });\n\n    statusElement.textContent = \"Searching case files...\";\n\n    const caseId = 'cmfivedyx0001c96zlzkskb7b';\n    const response = await fetch(`/api/cases/${caseId}/doc-gen`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        documentText: documentData.documentText,\n        placeholders: documentData.placeholders\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.statusText}`);\n    }\n\n    const result = await response.json();\n\n    statusElement.textContent = \"✓ Analysis complete!\";\n\n    if (result.suggestions && result.suggestions.length > 0) {\n      const suggestionsHTML = result.suggestions.map((suggestion: any) => `\n        <div style=\"padding: 12px; margin-bottom: 8px; background: #f5f5f5; border-radius: 6px; border-left: 4px solid #667eea;\">\n          <div style=\"font-weight: bold; color: #333; margin-bottom: 4px;\">${suggestion.placeholder}</div>\n          <div style=\"color: #666; font-size: 14px;\">${suggestion.suggestedValue || 'No suggestion found'}</div>\n          ${suggestion.source ? `<div style=\"color: #999; font-size: 12px; margin-top: 4px;\">Source: ${suggestion.source}</div>` : ''}\n        </div>\n      `).join('');\n\n      resultsElement.innerHTML = suggestionsHTML;\n      showNotification(\"Autofill complete!\", \"success\");\n    } else {\n      resultsElement.innerHTML = '<div style=\"color: #999; text-align: center;\">No suggestions found</div>';\n    }\n\n  } catch (error) {\n    console.error('[AI Autofill] Error:', error);\n    statusElement.textContent = `Error: ${error instanceof Error ? error.message : 'Unknown error'}`;\n    statusElement.style.color = '#d32f2f';\n    showNotification(\"Autofill failed\", \"error\");\n  } finally {\n    button.disabled = false;\n  }\n}\n\n/**\n * AI Rewrite handler\n */\nasync function handleAIRewrite(): Promise<void> {\n  const statusElement = document.getElementById(\"rewrite-status\");\n  const progressContainer = document.getElementById(\"progress-container\");\n  const progressBar = document.getElementById(\"progress-bar\");\n  const progressText = document.getElementById(\"progress-text\");\n  const button = document.getElementById(\"ai-rewrite-btn\") as HTMLButtonElement;\n\n  if (!statusElement || !button) {\n    showNotification(\"Required UI elements not found\", \"error\");\n    return;\n  }\n\n  try {\n    button.disabled = true;\n    if (progressContainer) progressContainer.style.display = 'block';\n    statusElement.textContent = \"📖 Reading entire document...\";\n    if (progressText) progressText.textContent = \"Step 1/4: Extracting document\";\n\n    const originalText = await extractFullDocument();\n    statusElement.textContent = `📖 Document read (${originalText.length} chars)`;\n\n    statusElement.textContent = \"🤖 Analyzing document...\";\n    if (progressText) progressText.textContent = \"Step 2/4: AI analysis\";\n    if (progressBar) (progressBar as HTMLElement).style.width = '25%';\n\n    const response = await sendToBackend(originalText);\n\n    if (response.replacements && response.replacements.length > 0) {\n      statusElement.textContent = `✅ Found ${response.replacements.length} placeholders to fill`;\n\n      statusElement.textContent = \"✍️ Applying replacements with track changes...\";\n      if (progressText) progressText.textContent = \"Step 3/3: Applying replacements\";\n      if (progressBar) (progressBar as HTMLElement).style.width = '50%';\n\n      await applyStructuredReplacements(response.replacements);\n      if (progressBar) (progressBar as HTMLElement).style.width = '100%';\n\n    } else {\n      const modifiedText = response.modifiedDocument || '';\n      statusElement.textContent = `✅ AI response received (${modifiedText.length} chars)`;\n\n      statusElement.textContent = \"🔍 Computing differences...\";\n      if (progressText) progressText.textContent = \"Step 3/4: Computing differences\";\n      if (progressBar) (progressBar as HTMLElement).style.width = '50%';\n\n      const changes = computeParagraphDiff(originalText, modifiedText);\n\n      statusElement.textContent = \"✍️ Applying changes with track changes...\";\n      if (progressText) progressText.textContent = \"Step 4/4: Applying changes\";\n      if (progressBar) (progressBar as HTMLElement).style.width = '75%';\n\n      await applyChangesWithTrackChanges(changes);\n    }\n\n    statusElement.textContent = \"✅ Document rewritten successfully!\";\n    if (progressText) progressText.textContent = \"Complete!\";\n    if (progressBar) (progressBar as HTMLElement).style.width = '100%';\n\n    showNotification(\"Document rewritten successfully!\", \"success\");\n\n    setTimeout(() => {\n      if (progressContainer) progressContainer.style.display = 'none';\n    }, 3000);\n\n  } catch (error) {\n    console.error('[AI Rewrite] Error:', error);\n    let errorMessage = error instanceof Error ? error.message : 'Unknown error';\n\n    if (errorMessage.includes('fetch') || errorMessage.includes('Failed to fetch')) {\n      errorMessage += ' (Cannot reach backend - is it running on port 3001?)';\n    }\n\n    statusElement.textContent = `❌ Error: ${errorMessage}`;\n    statusElement.style.color = '#d32f2f';\n    showNotification(\"Rewrite failed\", \"error\");\n  } finally {\n    button.disabled = false;\n  }\n}\n\nasync function extractFullDocument(): Promise<string> {\n  return Word.run(async (context) => {\n    context.document.body.load('text');\n    await context.sync();\n    return context.document.body.text;\n  });\n}\n\nasync function sendToBackend(documentText: string): Promise<{ replacements?: PlaceholderReplacement[], modifiedDocument?: string }> {\n  const caseId = 'cmfivedyx0001c96zlzkskb7b';\n  const url = `/api/word-agent/rewrite`;\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      documentText,\n      caseId,\n      instructions: 'Identify and fill all placeholders with accurate case information'\n    })\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`API ${response.status}: ${errorText.substring(0, 200)}`);\n  }\n\n  const result = await response.json();\n\n  if (!result.success) {\n    throw new Error(result.error?.message || 'Backend processing failed');\n  }\n\n  return {\n    replacements: result.replacements,\n    modifiedDocument: result.modifiedDocument\n  };\n}\n\nasync function applyStructuredReplacements(replacements: PlaceholderReplacement[]): Promise<void> {\n  return Word.run(async (context) => {\n    context.document.changeTrackingMode = Word.ChangeTrackingMode.trackAll;\n\n    try {\n      context.document.properties.author = \"Kenneth AI\";\n      context.document.properties.load('author');\n    } catch (e) {\n      console.warn(\"Could not set document author:\", e);\n    }\n\n    await context.sync();\n\n    for (let i = 0; i < replacements.length; i++) {\n      const replacement = replacements[i];\n\n      try {\n        const searchResults = context.document.body.search(replacement.placeholder, {\n          matchCase: false,\n          matchWholeWord: false\n        });\n\n        context.load(searchResults, 'items');\n        await context.sync();\n\n        if (searchResults.items.length === 0) {\n          console.warn(`Placeholder not found: \"${replacement.placeholder}\"`);\n          continue;\n        }\n\n        for (let j = 0; j < searchResults.items.length; j++) {\n          const range = searchResults.items[j];\n          range.insertText(replacement.value, Word.InsertLocation.replace);\n\n          try {\n            range.insertComment(\n              `Kenneth AI replaced \"${replacement.placeholder}\" with \"${replacement.value}\"\\n` +\n              `Confidence: ${replacement.confidence}\\n` +\n              (replacement.source ? `Source: ${replacement.source}` : '')\n            );\n          } catch (e) {\n            console.warn('Could not add comment:', e);\n          }\n        }\n\n        await context.sync();\n\n      } catch (error) {\n        console.error(`Failed to replace ${replacement.placeholder}:`, error);\n      }\n    }\n  });\n}\n\nfunction computeParagraphDiff(originalText: string, modifiedText: string): ParagraphChange[] {\n  const originalParagraphs = originalText.split(/\\r?\\n/);\n  const modifiedParagraphs = modifiedText.split(/\\r?\\n/);\n\n  const diffResult = Diff.diffArrays(originalParagraphs, modifiedParagraphs);\n\n  const changes: ParagraphChange[] = [];\n  let paragraphIndex = 0;\n\n  for (const change of diffResult) {\n    if (change.removed) {\n      for (const paragraph of change.value) {\n        changes.push({\n          type: 'delete',\n          paragraphIndex,\n          originalText: paragraph\n        });\n        paragraphIndex++;\n      }\n    } else if (change.added) {\n      for (const paragraph of change.value) {\n        changes.push({\n          type: 'insert',\n          paragraphIndex,\n          newText: paragraph\n        });\n      }\n    } else {\n      paragraphIndex += change.value.length;\n    }\n  }\n\n  return changes;\n}\n\nasync function applyChangesWithTrackChanges(changes: ParagraphChange[]): Promise<void> {\n  return Word.run(async (context) => {\n    context.document.changeTrackingMode = Word.ChangeTrackingMode.trackAll;\n\n    try {\n      context.document.properties.author = \"Kenneth AI\";\n      context.document.properties.load('author');\n    } catch (e) {\n      console.warn(\"Could not set document author:\", e);\n    }\n\n    await context.sync();\n\n    const paragraphs = context.document.body.paragraphs;\n    paragraphs.load('items');\n    await context.sync();\n\n    const reversedChanges = [...changes].reverse();\n\n    for (let i = 0; i < reversedChanges.length; i++) {\n      const change = reversedChanges[i];\n\n      try {\n        if (change.type === 'delete') {\n          await applyDelete(context, paragraphs, change);\n        } else if (change.type === 'insert') {\n          await applyInsert(context, paragraphs, change);\n        } else if (change.type === 'replace') {\n          await applyReplace(context, paragraphs, change);\n        }\n\n        await context.sync();\n      } catch (error) {\n        console.error(`Failed to apply change ${i}:`, error);\n      }\n    }\n  });\n}\n\nasync function applyDelete(\n  context: Word.RequestContext,\n  paragraphs: Word.ParagraphCollection,\n  change: ParagraphChange\n): Promise<void> {\n  const paragraph = paragraphs.items[change.paragraphIndex];\n  if (paragraph) {\n    paragraph.delete();\n  }\n}\n\nasync function applyInsert(\n  context: Word.RequestContext,\n  paragraphs: Word.ParagraphCollection,\n  change: ParagraphChange\n): Promise<void> {\n  const paragraph = paragraphs.items[change.paragraphIndex];\n\n  if (paragraph) {\n    paragraph.insertParagraph(change.newText || '', Word.InsertLocation.before);\n  } else {\n    context.document.body.insertParagraph(change.newText || '', Word.InsertLocation.end);\n  }\n}\n\nasync function applyReplace(\n  context: Word.RequestContext,\n  paragraphs: Word.ParagraphCollection,\n  change: ParagraphChange\n): Promise<void> {\n  const paragraph = paragraphs.items[change.paragraphIndex];\n\n  if (paragraph) {\n    paragraph.insertParagraph(change.newText || '', Word.InsertLocation.after);\n    paragraph.delete();\n  }\n}\n\n/**\n * Get Word HTML template\n */\nfunction getWordHTML(): string {\n  return `\n    <div style=\"width: 100%; height: 100vh; display: flex; flex-direction: column; background: white; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\">\n      <!-- Tab Navigation -->\n      <div style=\"display: flex; background: #1e1e1e; border-bottom: 1px solid #666;\">\n        <button class=\"tab-button active\" data-tab=\"drafting\" style=\"flex: 1; padding: 12px; background: #2d2d2d; color: white; border: none; cursor: pointer;\">Drafting</button>\n        <button class=\"tab-button\" data-tab=\"ai-chat\" style=\"flex: 1; padding: 12px; background: #1e1e1e; color: #999; border: none; cursor: pointer;\">AI Chat</button>\n      </div>\n\n      <!-- Drafting Tab Content -->\n      <div id=\"drafting-tab\" class=\"tab-content active\" style=\"display: flex; flex: 1; background: white; padding: 20px; overflow: auto; flex-direction: column; align-items: center; justify-content: flex-start;\">\n        <!-- DEBUG: Test Backend Connection -->\n        <div style=\"width: 100%; max-width: 500px; margin-bottom: 20px; padding: 16px; background: #fff3cd; border: 2px solid #ffc107; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 8px; color: #856404;\">🔧 Debug Test</h3>\n          <button id=\"test-ping-btn\" style=\"width: 100%; padding: 10px; background: #ffc107; color: #000; border: none; border-radius: 4px; font-weight: 600; cursor: pointer; margin-bottom: 8px;\">\n            Test Ping Backend (port 3001)\n          </button>\n          <div id=\"test-result\" style=\"font-size: 12px; color: #856404; font-family: monospace; white-space: pre-wrap; max-height: 200px; overflow-y: auto;\"></div>\n        </div>\n\n        <!-- AI Rewrite Section -->\n        <div style=\"width: 100%; max-width: 500px; margin-bottom: 30px;\">\n          <h3 style=\"margin-bottom: 12px; color: #333;\">🤖 AI Document Rewrite</h3>\n          <p style=\"font-size: 14px; color: #666; margin-bottom: 16px;\">\n            Send entire document to AI for intelligent rewriting with track changes\n          </p>\n          <button id=\"ai-rewrite-btn\" style=\"width: 100%; padding: 14px 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 8px; font-size: 16px; font-weight: 600; cursor: pointer;\">\n            ✨ AI Rewrite Document\n          </button>\n          <div id=\"rewrite-status\" style=\"margin-top: 12px; text-align: center; color: #666; font-size: 14px;\"></div>\n\n          <!-- Progress Bar -->\n          <div id=\"progress-container\" style=\"display: none; margin-top: 16px;\">\n            <div id=\"progress-text\" style=\"font-size: 13px; color: #666; margin-bottom: 8px;\">Processing...</div>\n            <div style=\"width: 100%; height: 8px; background: #f0f0f0; border-radius: 4px; overflow: hidden;\">\n              <div id=\"progress-bar\" style=\"width: 0%; height: 100%; background: linear-gradient(90deg, #667eea 0%, #764ba2 100%); transition: width 0.3s ease;\"></div>\n            </div>\n          </div>\n        </div>\n\n\n\n      <!-- AI Chat Tab Content -->\n      <div id=\"ai-chat-tab\" class=\"tab-content\" style=\"display: none; flex: 1; background: white; padding: 20px;\">\n        <div style=\"text-align: center; color: #999;\">\n          <h3>AI Chat</h3>\n          <p>Chat functionality will be added in the next phase</p>\n        </div>\n      </div>\n    </div>\n  `;\n}\n"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","handleStructuredAIRewrite","_handleStructuredAIRewrite","_callee","statusElement","progressContainer","progressBar","progressText","button","debugLog","addLog","structure","errMsg","operations","_errMsg","_errMsg2","errorMessage","errorStack","_t","_t2","_t3","_t4","_context","document","getElementById","alert","message","isError","undefined","timestamp","Date","toLocaleTimeString","logLine","concat","push","console","log","color","innerHTML","map","line","join","disabled","style","display","textContent","width","extractDocumentSimplified","text","placeholders","Error","String","JSON","stringify","documentText","sendToBackend","includes","executeOperations","setTimeout","error","stack","background","_extractDocumentSimplified","_callee3","_context3","Word","run","_ref","_callee2","context","body","placeholderRegex","_context2","load","sync","Array","from","Set","match","tables","_x10","_x","_x2","_sendToBackend","_callee4","requestBody","_result$operations","response","errorText","_errorJson$error","errorJson","resultText","result","_result$error","errorMsg","_t6","_t7","_context4","documentStructure","caseId","useStructuredOperations","instructions","fetch","method","headers","status","statusText","ok","substring","parse","success","_x3","_executeOperations","_callee6","_context6","_ref2","_callee5","successCount","failureCount","operation","_t8","_t9","_context5","changeTrackingMode","ChangeTrackingMode","trackAll","properties","author","warn","type","executeFillTableCell","executeReplacePlaceholder","executeReplaceText","executeDeleteText","total","failed","_x11","_x4","_x5","_executeFillTableCell","_callee7","table","rows","row","cells","cell","_context7","tableIndex","items","clear","insertText","InsertLocation","start","_x6","_x7","_executeReplacePlaceholder","_callee8","isLongPlaceholder","searchTerm","prefixMatch","searchResults","replacedCount","_iterator","_step","paragraph","paragraphText","placeholderIndex","newText","_iterator2","_step2","_t1","_context8","target","search","matchCase","matchWholeWord","_createForOfIteratorHelper","s","paragraphs","getFirst","indexOf","replaceAll","replace","err","_x8","_x9","_executeReplaceText","_callee9","_iterator3","_step3","_context9","_x0","_x1","_executeDeleteText","_callee0","_iterator4","_step4","_context0","delete","_arrayLikeToArray","toString","slice","constructor","name","test","initialize","appContainer","tabButtons","tabContents","querySelectorAll","forEach","addEventListener","targetTab","getAttribute","btn","classList","remove","content","add","targetContent","aiRewriteBtn","aiAutofillBtn","testPingBtn","onclick","handleAIAutofill","handleTestPing","showNotification","notification","createElement","cssText","appendChild","animation","_handleTestPing","resultElement","data","urlsToTest","_i","_urlsToTest","url","startTime","_response","elapsed","json","title","now","mode","window","location","origin","href","protocol","_handleAIAutofill","resultsElement","documentData","suggestionsHTML","exec","_toConsumableArray","suggestions","suggestion","placeholder","suggestedValue","source"],"sourceRoot":""}